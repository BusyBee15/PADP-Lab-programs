set openmp : sudo apt-get install libomp-dev
install mpi : sudo apt install mpich

install gd library
sudo apt-get install php-gd
try this, if this doesn't work, try
sudo apt install libgd-dev

#include<omp.h> 
#include<mpi.h> 
sudo apt-get install openmpi-doc

#include <gd.h>

Program1 execution:
open Program2 directory in the terminal
OpenMP Program : (must)see some video on YT for montecarlo method
" #pragma omp parallel for private(i, x, y) reduction(+:sum) "

* pi = 4* sum/n
* typecast random number generated to double

for these many threads 
    for these many points 
        print the points and actually calculating the fraction of points that lie inside circle 

execution commands:
cc -fopenmp openmp_monte_carlo.c
./a.out

MPI Program

reduced_iter = reduced_iter - iter (even after reducing, w/o this wrong op)
if rank = 0 , start time, rank>0, do the work, reduce, in root, end time
use reduced values to calculate pi

Execution commands:
mpicc mpi_monte_carlo.c
mpirun -np 4 ./a.out



Program2 execution:
" #pragma omp parallel for private(i,j,k) shared(A,B,C) "
open Program2 directory in the terminal
commands : 

cc -fopenmp matril_mul.c
./a.out

Program3
#pragma omp parallel
#pragma omp for reduction(+:count)

Execution commands(g++, not gcc)
g++ -fopenmp sieve.cpp
./a.out

Program4

#pragma omp parallel for schedule(guided) private(x,y,color)
#pragma omp critical
gdImagePtr
gdImageCreateFromPng(fp);  - returns gdImagePtr
gdImageSX(img)
gdImageSY(img)
gdImageGetPixel(img, x, y);
gdImageRed(img, color)
gdImageSetPixel(img, x, y, color);
gdImagePng(img, fp);
gdImageDestroy(img);
fclose(fp);

execution commands 
cc -fopenmp grey_image.c -lgd
./a.out input.png output.png



Program5 

Initialize code for MPI

if the rank is not root, copy one msg from the set to buffer, send it
if the rank is root, recv msgs (how many number of times - number of processes - 1 ; starting from 1)

Execution commands:
mpicc mpi_msg-passing.c
mpirun -np 4 ./a.out



Program6 - word search Execution commands
A: 

 #pragma omp parallel shared(counts, search_words) private(i) num_threads(threads)


for these many threads
    open the file
    read the file and count words 



fscanf(fp, "%s", buffer)==1) // reads word by word


openmp functions used:

omp_set_num_threads(n)
omg_get_wtime()

stdlib
rand()

string.h
strcpy(msg, mgs[rank-1]) - strcpy(dest, src)

fopen(iname, "r")  - returns file pointer, NULL if unsuccessful

mpi functions 

MPI_Init() - MPI_Init(&argc,&argv);
MPI_Comm_rank(MPI_COMM_WORLD, &rank) - int MPI_Comm_rank(MPI_Comm comm, int *rank)
MPI_Comm_size(MPI_COMM_WORLD, &size) -int MPI_Comm_size(MPI_Comm comm, int *size)
MPI_Wtime()

int MPI_Reduce(const void *sendbuf, void *recvbuf, int count,
               MPI_Datatype datatype, MPI_Op op, int root,
               MPI_Comm comm)

- MPI_Reduce(&count, &reduced_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD)

MPI_Finalize()

int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)
- MPI_Send(message, BUFFER_SIZE, MPI_CHAR, root, 1, MPI_COMM_WORLD)

MPI_Recv(message, BUFFER_SIZE, MPI_CHAR, temp, tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE); - MPI_STATUS_IGNORE
